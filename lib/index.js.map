{"version":3,"sources":["../src/index.js"],"names":["PORT","app","use","bodyParser","json","todoSchema","mongoose","Schema","todo_description","String","todo_responsible","todo_priority","todo_completed","Boolean","connect","useNewUrlParser","connection","once","console","log","TodoModel","model","module","exports","todoRoutes","express","Router","route","get","req","res","find","err","todos","id","params","Todo","findById","todo","post","body","JSON","stringify","save","then","status","send","listen"],"mappings":"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","sourcesContent":["import express from 'express';\r\nimport bodyParse from 'body-parser';\r\nimport cors from 'cors';\r\nimport bodyParser from 'body-parser';\r\nimport mongoose, { Schema } from 'mongoose';\r\n\r\nconst PORT = 3000;\r\nconst app = express();\r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\nconst todoSchema = new mongoose.Schema({\r\n    todo_description: String,\r\n    todo_responsible: String,\r\n    todo_priority: String,\r\n    todo_completed: Boolean\r\n});\r\n\r\nmongoose.connect('mongodb://127.0.0.1:27017/todos', { useNewUrlParser: true });\r\nconst connection = mongoose.connection;\r\n\r\nconnection.once('open', function () {\r\n    console.log(\"MongoDB database connection established successfully!\");\r\n})\r\n\r\nconst TodoModel = mongoose.model('Todo', todoSchema);\r\n\r\nmodule.exports = TodoModel;\r\n\r\nconst todoRoutes = express.Router();\r\n\r\ntodoRoutes.route('/').get((req, res) => {\r\n    TodoModel.find({}, function (err, todos) {\r\n        if (err) {\r\n            console.log(err);\r\n        } else {\r\n            res.json(todos);\r\n        }\r\n    });\r\n});\r\n\r\ntodoRoutes.route('/:id').get(function (req, res) {\r\n    let id = req.params.id;\r\n    Todo.findById(id, function (err, todo) {\r\n        res.json(todo);\r\n    });\r\n});\r\n\r\ntodoRoutes.route('/add').post(function (req, res) {\r\n    let todo = new TodoModel(req.body);\r\n    console.log(`Got a create request for ${JSON.stringify(req.body)}`);\r\n    todo.save()\r\n        .then(todo => {\r\n            res.status(200).json({ 'todo': 'todo added successfully' });\r\n        })\r\n        .catch(err => {\r\n            res.status(400).send('adding new todo failed');\r\n        });\r\n});\r\n\r\ntodoRoutes.route('/update/:id').post(function (req, res) {\r\n    TodoModel.findById(req.params.id, function (err, todo) {\r\n        if (!todo) {\r\n            res.status(404).send(\"data is not found\");\r\n        } else {\r\n            todo.todo_description = req.body.todo_description;\r\n            todo.todo_responsible = req.body.todo_responsible;\r\n            todo.todo_priority = req.body.todo_priority;\r\n            todo.todo_completed = req.body.todo_completed;\r\n\r\n            todo.save().then(todo => {\r\n                res.json('Todo updated!');\r\n            })\r\n                .catch(err => {\r\n                    res.status(400).send(\"Update not possible\");\r\n                });\r\n        }\r\n    });\r\n});\r\n\r\napp.use('/todos', todoRoutes);\r\n\r\napp.listen(PORT, function () {\r\n    console.log(\"Server is running on Port with: \" + PORT);\r\n});"],"file":"index.js"}